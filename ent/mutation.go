// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/mcbebu/ALTER-TABLE/ent/order"
	"github.com/mcbebu/ALTER-TABLE/ent/predicate"
	"github.com/mcbebu/ALTER-TABLE/ent/schema"
	"github.com/mcbebu/ALTER-TABLE/ent/shipper"
	"github.com/mcbebu/ALTER-TABLE/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrder   = "Order"
	TypeShipper = "Shipper"
	TypeUser    = "User"
)

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	title                   *string
	description             *string
	altMobileNumber         *string
	address                 *schema.Address
	leaveParcel             *bool
	instructions            *[]string
	appendinstructions      []string
	status                  *order.Status
	stopsUntilDelivery      *int
	addstopsUntilDelivery   *int
	estimatedArrivalTime    *int
	addestimatedArrivalTime *int
	createdAt               *time.Time
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Order, error)
	predicates              []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrderMutation) ResetName() {
	m.name = nil
}

// SetTitle sets the "title" field.
func (m *OrderMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *OrderMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *OrderMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *OrderMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OrderMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OrderMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[order.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OrderMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[order.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OrderMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, order.FieldDescription)
}

// SetAltMobileNumber sets the "altMobileNumber" field.
func (m *OrderMutation) SetAltMobileNumber(s string) {
	m.altMobileNumber = &s
}

// AltMobileNumber returns the value of the "altMobileNumber" field in the mutation.
func (m *OrderMutation) AltMobileNumber() (r string, exists bool) {
	v := m.altMobileNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldAltMobileNumber returns the old "altMobileNumber" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAltMobileNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAltMobileNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAltMobileNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAltMobileNumber: %w", err)
	}
	return oldValue.AltMobileNumber, nil
}

// ClearAltMobileNumber clears the value of the "altMobileNumber" field.
func (m *OrderMutation) ClearAltMobileNumber() {
	m.altMobileNumber = nil
	m.clearedFields[order.FieldAltMobileNumber] = struct{}{}
}

// AltMobileNumberCleared returns if the "altMobileNumber" field was cleared in this mutation.
func (m *OrderMutation) AltMobileNumberCleared() bool {
	_, ok := m.clearedFields[order.FieldAltMobileNumber]
	return ok
}

// ResetAltMobileNumber resets all changes to the "altMobileNumber" field.
func (m *OrderMutation) ResetAltMobileNumber() {
	m.altMobileNumber = nil
	delete(m.clearedFields, order.FieldAltMobileNumber)
}

// SetAddress sets the "address" field.
func (m *OrderMutation) SetAddress(s schema.Address) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *OrderMutation) Address() (r schema.Address, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAddress(ctx context.Context) (v schema.Address, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *OrderMutation) ResetAddress() {
	m.address = nil
}

// SetLeaveParcel sets the "leaveParcel" field.
func (m *OrderMutation) SetLeaveParcel(b bool) {
	m.leaveParcel = &b
}

// LeaveParcel returns the value of the "leaveParcel" field in the mutation.
func (m *OrderMutation) LeaveParcel() (r bool, exists bool) {
	v := m.leaveParcel
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaveParcel returns the old "leaveParcel" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldLeaveParcel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaveParcel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaveParcel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaveParcel: %w", err)
	}
	return oldValue.LeaveParcel, nil
}

// ResetLeaveParcel resets all changes to the "leaveParcel" field.
func (m *OrderMutation) ResetLeaveParcel() {
	m.leaveParcel = nil
}

// SetInstructions sets the "instructions" field.
func (m *OrderMutation) SetInstructions(s []string) {
	m.instructions = &s
	m.appendinstructions = nil
}

// Instructions returns the value of the "instructions" field in the mutation.
func (m *OrderMutation) Instructions() (r []string, exists bool) {
	v := m.instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldInstructions returns the old "instructions" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldInstructions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstructions: %w", err)
	}
	return oldValue.Instructions, nil
}

// AppendInstructions adds s to the "instructions" field.
func (m *OrderMutation) AppendInstructions(s []string) {
	m.appendinstructions = append(m.appendinstructions, s...)
}

// AppendedInstructions returns the list of values that were appended to the "instructions" field in this mutation.
func (m *OrderMutation) AppendedInstructions() ([]string, bool) {
	if len(m.appendinstructions) == 0 {
		return nil, false
	}
	return m.appendinstructions, true
}

// ResetInstructions resets all changes to the "instructions" field.
func (m *OrderMutation) ResetInstructions() {
	m.instructions = nil
	m.appendinstructions = nil
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(o order.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r order.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v order.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
}

// SetStopsUntilDelivery sets the "stopsUntilDelivery" field.
func (m *OrderMutation) SetStopsUntilDelivery(i int) {
	m.stopsUntilDelivery = &i
	m.addstopsUntilDelivery = nil
}

// StopsUntilDelivery returns the value of the "stopsUntilDelivery" field in the mutation.
func (m *OrderMutation) StopsUntilDelivery() (r int, exists bool) {
	v := m.stopsUntilDelivery
	if v == nil {
		return
	}
	return *v, true
}

// OldStopsUntilDelivery returns the old "stopsUntilDelivery" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStopsUntilDelivery(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStopsUntilDelivery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStopsUntilDelivery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStopsUntilDelivery: %w", err)
	}
	return oldValue.StopsUntilDelivery, nil
}

// AddStopsUntilDelivery adds i to the "stopsUntilDelivery" field.
func (m *OrderMutation) AddStopsUntilDelivery(i int) {
	if m.addstopsUntilDelivery != nil {
		*m.addstopsUntilDelivery += i
	} else {
		m.addstopsUntilDelivery = &i
	}
}

// AddedStopsUntilDelivery returns the value that was added to the "stopsUntilDelivery" field in this mutation.
func (m *OrderMutation) AddedStopsUntilDelivery() (r int, exists bool) {
	v := m.addstopsUntilDelivery
	if v == nil {
		return
	}
	return *v, true
}

// ClearStopsUntilDelivery clears the value of the "stopsUntilDelivery" field.
func (m *OrderMutation) ClearStopsUntilDelivery() {
	m.stopsUntilDelivery = nil
	m.addstopsUntilDelivery = nil
	m.clearedFields[order.FieldStopsUntilDelivery] = struct{}{}
}

// StopsUntilDeliveryCleared returns if the "stopsUntilDelivery" field was cleared in this mutation.
func (m *OrderMutation) StopsUntilDeliveryCleared() bool {
	_, ok := m.clearedFields[order.FieldStopsUntilDelivery]
	return ok
}

// ResetStopsUntilDelivery resets all changes to the "stopsUntilDelivery" field.
func (m *OrderMutation) ResetStopsUntilDelivery() {
	m.stopsUntilDelivery = nil
	m.addstopsUntilDelivery = nil
	delete(m.clearedFields, order.FieldStopsUntilDelivery)
}

// SetEstimatedArrivalTime sets the "estimatedArrivalTime" field.
func (m *OrderMutation) SetEstimatedArrivalTime(i int) {
	m.estimatedArrivalTime = &i
	m.addestimatedArrivalTime = nil
}

// EstimatedArrivalTime returns the value of the "estimatedArrivalTime" field in the mutation.
func (m *OrderMutation) EstimatedArrivalTime() (r int, exists bool) {
	v := m.estimatedArrivalTime
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedArrivalTime returns the old "estimatedArrivalTime" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldEstimatedArrivalTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEstimatedArrivalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEstimatedArrivalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedArrivalTime: %w", err)
	}
	return oldValue.EstimatedArrivalTime, nil
}

// AddEstimatedArrivalTime adds i to the "estimatedArrivalTime" field.
func (m *OrderMutation) AddEstimatedArrivalTime(i int) {
	if m.addestimatedArrivalTime != nil {
		*m.addestimatedArrivalTime += i
	} else {
		m.addestimatedArrivalTime = &i
	}
}

// AddedEstimatedArrivalTime returns the value that was added to the "estimatedArrivalTime" field in this mutation.
func (m *OrderMutation) AddedEstimatedArrivalTime() (r int, exists bool) {
	v := m.addestimatedArrivalTime
	if v == nil {
		return
	}
	return *v, true
}

// ClearEstimatedArrivalTime clears the value of the "estimatedArrivalTime" field.
func (m *OrderMutation) ClearEstimatedArrivalTime() {
	m.estimatedArrivalTime = nil
	m.addestimatedArrivalTime = nil
	m.clearedFields[order.FieldEstimatedArrivalTime] = struct{}{}
}

// EstimatedArrivalTimeCleared returns if the "estimatedArrivalTime" field was cleared in this mutation.
func (m *OrderMutation) EstimatedArrivalTimeCleared() bool {
	_, ok := m.clearedFields[order.FieldEstimatedArrivalTime]
	return ok
}

// ResetEstimatedArrivalTime resets all changes to the "estimatedArrivalTime" field.
func (m *OrderMutation) ResetEstimatedArrivalTime() {
	m.estimatedArrivalTime = nil
	m.addestimatedArrivalTime = nil
	delete(m.clearedFields, order.FieldEstimatedArrivalTime)
}

// SetCreatedAt sets the "createdAt" field.
func (m *OrderMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *OrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Order, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, order.FieldName)
	}
	if m.title != nil {
		fields = append(fields, order.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, order.FieldDescription)
	}
	if m.altMobileNumber != nil {
		fields = append(fields, order.FieldAltMobileNumber)
	}
	if m.address != nil {
		fields = append(fields, order.FieldAddress)
	}
	if m.leaveParcel != nil {
		fields = append(fields, order.FieldLeaveParcel)
	}
	if m.instructions != nil {
		fields = append(fields, order.FieldInstructions)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	if m.stopsUntilDelivery != nil {
		fields = append(fields, order.FieldStopsUntilDelivery)
	}
	if m.estimatedArrivalTime != nil {
		fields = append(fields, order.FieldEstimatedArrivalTime)
	}
	if m.createdAt != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldName:
		return m.Name()
	case order.FieldTitle:
		return m.Title()
	case order.FieldDescription:
		return m.Description()
	case order.FieldAltMobileNumber:
		return m.AltMobileNumber()
	case order.FieldAddress:
		return m.Address()
	case order.FieldLeaveParcel:
		return m.LeaveParcel()
	case order.FieldInstructions:
		return m.Instructions()
	case order.FieldStatus:
		return m.Status()
	case order.FieldStopsUntilDelivery:
		return m.StopsUntilDelivery()
	case order.FieldEstimatedArrivalTime:
		return m.EstimatedArrivalTime()
	case order.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldName:
		return m.OldName(ctx)
	case order.FieldTitle:
		return m.OldTitle(ctx)
	case order.FieldDescription:
		return m.OldDescription(ctx)
	case order.FieldAltMobileNumber:
		return m.OldAltMobileNumber(ctx)
	case order.FieldAddress:
		return m.OldAddress(ctx)
	case order.FieldLeaveParcel:
		return m.OldLeaveParcel(ctx)
	case order.FieldInstructions:
		return m.OldInstructions(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	case order.FieldStopsUntilDelivery:
		return m.OldStopsUntilDelivery(ctx)
	case order.FieldEstimatedArrivalTime:
		return m.OldEstimatedArrivalTime(ctx)
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case order.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case order.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case order.FieldAltMobileNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAltMobileNumber(v)
		return nil
	case order.FieldAddress:
		v, ok := value.(schema.Address)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case order.FieldLeaveParcel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaveParcel(v)
		return nil
	case order.FieldInstructions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstructions(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(order.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case order.FieldStopsUntilDelivery:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStopsUntilDelivery(v)
		return nil
	case order.FieldEstimatedArrivalTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedArrivalTime(v)
		return nil
	case order.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addstopsUntilDelivery != nil {
		fields = append(fields, order.FieldStopsUntilDelivery)
	}
	if m.addestimatedArrivalTime != nil {
		fields = append(fields, order.FieldEstimatedArrivalTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldStopsUntilDelivery:
		return m.AddedStopsUntilDelivery()
	case order.FieldEstimatedArrivalTime:
		return m.AddedEstimatedArrivalTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldStopsUntilDelivery:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStopsUntilDelivery(v)
		return nil
	case order.FieldEstimatedArrivalTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEstimatedArrivalTime(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldDescription) {
		fields = append(fields, order.FieldDescription)
	}
	if m.FieldCleared(order.FieldAltMobileNumber) {
		fields = append(fields, order.FieldAltMobileNumber)
	}
	if m.FieldCleared(order.FieldStopsUntilDelivery) {
		fields = append(fields, order.FieldStopsUntilDelivery)
	}
	if m.FieldCleared(order.FieldEstimatedArrivalTime) {
		fields = append(fields, order.FieldEstimatedArrivalTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldDescription:
		m.ClearDescription()
		return nil
	case order.FieldAltMobileNumber:
		m.ClearAltMobileNumber()
		return nil
	case order.FieldStopsUntilDelivery:
		m.ClearStopsUntilDelivery()
		return nil
	case order.FieldEstimatedArrivalTime:
		m.ClearEstimatedArrivalTime()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldName:
		m.ResetName()
		return nil
	case order.FieldTitle:
		m.ResetTitle()
		return nil
	case order.FieldDescription:
		m.ResetDescription()
		return nil
	case order.FieldAltMobileNumber:
		m.ResetAltMobileNumber()
		return nil
	case order.FieldAddress:
		m.ResetAddress()
		return nil
	case order.FieldLeaveParcel:
		m.ResetLeaveParcel()
		return nil
	case order.FieldInstructions:
		m.ResetInstructions()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	case order.FieldStopsUntilDelivery:
		m.ResetStopsUntilDelivery()
		return nil
	case order.FieldEstimatedArrivalTime:
		m.ResetEstimatedArrivalTime()
		return nil
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// ShipperMutation represents an operation that mutates the Shipper nodes in the graph.
type ShipperMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	orders        *int
	clearedorders bool
	done          bool
	oldValue      func(context.Context) (*Shipper, error)
	predicates    []predicate.Shipper
}

var _ ent.Mutation = (*ShipperMutation)(nil)

// shipperOption allows management of the mutation configuration using functional options.
type shipperOption func(*ShipperMutation)

// newShipperMutation creates new mutation for the Shipper entity.
func newShipperMutation(c config, op Op, opts ...shipperOption) *ShipperMutation {
	m := &ShipperMutation{
		config:        c,
		op:            op,
		typ:           TypeShipper,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShipperID sets the ID field of the mutation.
func withShipperID(id int) shipperOption {
	return func(m *ShipperMutation) {
		var (
			err   error
			once  sync.Once
			value *Shipper
		)
		m.oldValue = func(ctx context.Context) (*Shipper, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shipper.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShipper sets the old Shipper of the mutation.
func withShipper(node *Shipper) shipperOption {
	return func(m *ShipperMutation) {
		m.oldValue = func(context.Context) (*Shipper, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShipperMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShipperMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShipperMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShipperMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shipper.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ShipperMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ShipperMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Shipper entity.
// If the Shipper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipperMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ShipperMutation) ResetName() {
	m.name = nil
}

// SetOrdersID sets the "orders" edge to the Order entity by id.
func (m *ShipperMutation) SetOrdersID(id int) {
	m.orders = &id
}

// ClearOrders clears the "orders" edge to the Order entity.
func (m *ShipperMutation) ClearOrders() {
	m.clearedorders = true
}

// OrdersCleared reports if the "orders" edge to the Order entity was cleared.
func (m *ShipperMutation) OrdersCleared() bool {
	return m.clearedorders
}

// OrdersID returns the "orders" edge ID in the mutation.
func (m *ShipperMutation) OrdersID() (id int, exists bool) {
	if m.orders != nil {
		return *m.orders, true
	}
	return
}

// OrdersIDs returns the "orders" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrdersID instead. It exists only for internal usage by the builders.
func (m *ShipperMutation) OrdersIDs() (ids []int) {
	if id := m.orders; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrders resets all changes to the "orders" edge.
func (m *ShipperMutation) ResetOrders() {
	m.orders = nil
	m.clearedorders = false
}

// Where appends a list predicates to the ShipperMutation builder.
func (m *ShipperMutation) Where(ps ...predicate.Shipper) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShipperMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShipperMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Shipper, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShipperMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShipperMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Shipper).
func (m *ShipperMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShipperMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, shipper.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShipperMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shipper.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShipperMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shipper.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Shipper field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipperMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shipper.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Shipper field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShipperMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShipperMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipperMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shipper numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShipperMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShipperMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShipperMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shipper nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShipperMutation) ResetField(name string) error {
	switch name {
	case shipper.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Shipper field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShipperMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.orders != nil {
		edges = append(edges, shipper.EdgeOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShipperMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shipper.EdgeOrders:
		if id := m.orders; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShipperMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShipperMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShipperMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorders {
		edges = append(edges, shipper.EdgeOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShipperMutation) EdgeCleared(name string) bool {
	switch name {
	case shipper.EdgeOrders:
		return m.clearedorders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShipperMutation) ClearEdge(name string) error {
	switch name {
	case shipper.EdgeOrders:
		m.ClearOrders()
		return nil
	}
	return fmt.Errorf("unknown Shipper unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShipperMutation) ResetEdge(name string) error {
	switch name {
	case shipper.EdgeOrders:
		m.ResetOrders()
		return nil
	}
	return fmt.Errorf("unknown Shipper edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	mobileNumber       *string
	addresses          *[]schema.Address
	appendaddresses    []schema.Address
	leaveParcel        *bool
	instructions       *[]string
	appendinstructions []string
	notifications      *[4]bool
	clearedFields      map[string]struct{}
	orders             *int
	clearedorders      bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMobileNumber sets the "mobileNumber" field.
func (m *UserMutation) SetMobileNumber(s string) {
	m.mobileNumber = &s
}

// MobileNumber returns the value of the "mobileNumber" field in the mutation.
func (m *UserMutation) MobileNumber() (r string, exists bool) {
	v := m.mobileNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldMobileNumber returns the old "mobileNumber" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMobileNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobileNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobileNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobileNumber: %w", err)
	}
	return oldValue.MobileNumber, nil
}

// ResetMobileNumber resets all changes to the "mobileNumber" field.
func (m *UserMutation) ResetMobileNumber() {
	m.mobileNumber = nil
}

// SetAddresses sets the "addresses" field.
func (m *UserMutation) SetAddresses(s []schema.Address) {
	m.addresses = &s
	m.appendaddresses = nil
}

// Addresses returns the value of the "addresses" field in the mutation.
func (m *UserMutation) Addresses() (r []schema.Address, exists bool) {
	v := m.addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldAddresses returns the old "addresses" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddresses(ctx context.Context) (v []schema.Address, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddresses: %w", err)
	}
	return oldValue.Addresses, nil
}

// AppendAddresses adds s to the "addresses" field.
func (m *UserMutation) AppendAddresses(s []schema.Address) {
	m.appendaddresses = append(m.appendaddresses, s...)
}

// AppendedAddresses returns the list of values that were appended to the "addresses" field in this mutation.
func (m *UserMutation) AppendedAddresses() ([]schema.Address, bool) {
	if len(m.appendaddresses) == 0 {
		return nil, false
	}
	return m.appendaddresses, true
}

// ResetAddresses resets all changes to the "addresses" field.
func (m *UserMutation) ResetAddresses() {
	m.addresses = nil
	m.appendaddresses = nil
}

// SetLeaveParcel sets the "leaveParcel" field.
func (m *UserMutation) SetLeaveParcel(b bool) {
	m.leaveParcel = &b
}

// LeaveParcel returns the value of the "leaveParcel" field in the mutation.
func (m *UserMutation) LeaveParcel() (r bool, exists bool) {
	v := m.leaveParcel
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaveParcel returns the old "leaveParcel" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLeaveParcel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaveParcel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaveParcel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaveParcel: %w", err)
	}
	return oldValue.LeaveParcel, nil
}

// ResetLeaveParcel resets all changes to the "leaveParcel" field.
func (m *UserMutation) ResetLeaveParcel() {
	m.leaveParcel = nil
}

// SetInstructions sets the "instructions" field.
func (m *UserMutation) SetInstructions(s []string) {
	m.instructions = &s
	m.appendinstructions = nil
}

// Instructions returns the value of the "instructions" field in the mutation.
func (m *UserMutation) Instructions() (r []string, exists bool) {
	v := m.instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldInstructions returns the old "instructions" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldInstructions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstructions: %w", err)
	}
	return oldValue.Instructions, nil
}

// AppendInstructions adds s to the "instructions" field.
func (m *UserMutation) AppendInstructions(s []string) {
	m.appendinstructions = append(m.appendinstructions, s...)
}

// AppendedInstructions returns the list of values that were appended to the "instructions" field in this mutation.
func (m *UserMutation) AppendedInstructions() ([]string, bool) {
	if len(m.appendinstructions) == 0 {
		return nil, false
	}
	return m.appendinstructions, true
}

// ResetInstructions resets all changes to the "instructions" field.
func (m *UserMutation) ResetInstructions() {
	m.instructions = nil
	m.appendinstructions = nil
}

// SetNotifications sets the "notifications" field.
func (m *UserMutation) SetNotifications(b [4]bool) {
	m.notifications = &b
}

// Notifications returns the value of the "notifications" field in the mutation.
func (m *UserMutation) Notifications() (r [4]bool, exists bool) {
	v := m.notifications
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifications returns the old "notifications" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNotifications(ctx context.Context) (v [4]bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifications is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifications requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifications: %w", err)
	}
	return oldValue.Notifications, nil
}

// ResetNotifications resets all changes to the "notifications" field.
func (m *UserMutation) ResetNotifications() {
	m.notifications = nil
}

// SetOrdersID sets the "orders" edge to the Order entity by id.
func (m *UserMutation) SetOrdersID(id int) {
	m.orders = &id
}

// ClearOrders clears the "orders" edge to the Order entity.
func (m *UserMutation) ClearOrders() {
	m.clearedorders = true
}

// OrdersCleared reports if the "orders" edge to the Order entity was cleared.
func (m *UserMutation) OrdersCleared() bool {
	return m.clearedorders
}

// OrdersID returns the "orders" edge ID in the mutation.
func (m *UserMutation) OrdersID() (id int, exists bool) {
	if m.orders != nil {
		return *m.orders, true
	}
	return
}

// OrdersIDs returns the "orders" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrdersID instead. It exists only for internal usage by the builders.
func (m *UserMutation) OrdersIDs() (ids []int) {
	if id := m.orders; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrders resets all changes to the "orders" edge.
func (m *UserMutation) ResetOrders() {
	m.orders = nil
	m.clearedorders = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.mobileNumber != nil {
		fields = append(fields, user.FieldMobileNumber)
	}
	if m.addresses != nil {
		fields = append(fields, user.FieldAddresses)
	}
	if m.leaveParcel != nil {
		fields = append(fields, user.FieldLeaveParcel)
	}
	if m.instructions != nil {
		fields = append(fields, user.FieldInstructions)
	}
	if m.notifications != nil {
		fields = append(fields, user.FieldNotifications)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldMobileNumber:
		return m.MobileNumber()
	case user.FieldAddresses:
		return m.Addresses()
	case user.FieldLeaveParcel:
		return m.LeaveParcel()
	case user.FieldInstructions:
		return m.Instructions()
	case user.FieldNotifications:
		return m.Notifications()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldMobileNumber:
		return m.OldMobileNumber(ctx)
	case user.FieldAddresses:
		return m.OldAddresses(ctx)
	case user.FieldLeaveParcel:
		return m.OldLeaveParcel(ctx)
	case user.FieldInstructions:
		return m.OldInstructions(ctx)
	case user.FieldNotifications:
		return m.OldNotifications(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldMobileNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobileNumber(v)
		return nil
	case user.FieldAddresses:
		v, ok := value.([]schema.Address)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddresses(v)
		return nil
	case user.FieldLeaveParcel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaveParcel(v)
		return nil
	case user.FieldInstructions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstructions(v)
		return nil
	case user.FieldNotifications:
		v, ok := value.([4]bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifications(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldMobileNumber:
		m.ResetMobileNumber()
		return nil
	case user.FieldAddresses:
		m.ResetAddresses()
		return nil
	case user.FieldLeaveParcel:
		m.ResetLeaveParcel()
		return nil
	case user.FieldInstructions:
		m.ResetInstructions()
		return nil
	case user.FieldNotifications:
		m.ResetNotifications()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.orders != nil {
		edges = append(edges, user.EdgeOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrders:
		if id := m.orders; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorders {
		edges = append(edges, user.EdgeOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOrders:
		return m.clearedorders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeOrders:
		m.ClearOrders()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOrders:
		m.ResetOrders()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
