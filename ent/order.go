// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mcbebu/ALTER-TABLE/ent/order"
	"github.com/mcbebu/ALTER-TABLE/ent/schema"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AltMobileNumber holds the value of the "altMobileNumber" field.
	AltMobileNumber string `json:"altMobileNumber,omitempty"`
	// Address holds the value of the "address" field.
	Address schema.Address `json:"address,omitempty"`
	// LeaveParcel holds the value of the "leaveParcel" field.
	LeaveParcel bool `json:"leaveParcel,omitempty"`
	// Instructions holds the value of the "instructions" field.
	Instructions []string `json:"instructions,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// StopsUntilDelivery holds the value of the "stopsUntilDelivery" field.
	StopsUntilDelivery int `json:"stopsUntilDelivery,omitempty"`
	// EstimatedArrivalTime holds the value of the "estimatedArrivalTime" field.
	EstimatedArrivalTime int `json:"estimatedArrivalTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldAddress, order.FieldInstructions:
			values[i] = new([]byte)
		case order.FieldLeaveParcel:
			values[i] = new(sql.NullBool)
		case order.FieldID, order.FieldStopsUntilDelivery, order.FieldEstimatedArrivalTime:
			values[i] = new(sql.NullInt64)
		case order.FieldName, order.FieldTitle, order.FieldDescription, order.FieldAltMobileNumber, order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case order.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				o.Title = value.String
			}
		case order.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case order.FieldAltMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field altMobileNumber", values[i])
			} else if value.Valid {
				o.AltMobileNumber = value.String
			}
		case order.FieldAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Address); err != nil {
					return fmt.Errorf("unmarshal field address: %w", err)
				}
			}
		case order.FieldLeaveParcel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field leaveParcel", values[i])
			} else if value.Valid {
				o.LeaveParcel = value.Bool
			}
		case order.FieldInstructions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field instructions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Instructions); err != nil {
					return fmt.Errorf("unmarshal field instructions: %w", err)
				}
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = order.Status(value.String)
			}
		case order.FieldStopsUntilDelivery:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stopsUntilDelivery", values[i])
			} else if value.Valid {
				o.StopsUntilDelivery = int(value.Int64)
			}
		case order.FieldEstimatedArrivalTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimatedArrivalTime", values[i])
			} else if value.Valid {
				o.EstimatedArrivalTime = int(value.Int64)
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(o.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteString(", ")
	builder.WriteString("altMobileNumber=")
	builder.WriteString(o.AltMobileNumber)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(fmt.Sprintf("%v", o.Address))
	builder.WriteString(", ")
	builder.WriteString("leaveParcel=")
	builder.WriteString(fmt.Sprintf("%v", o.LeaveParcel))
	builder.WriteString(", ")
	builder.WriteString("instructions=")
	builder.WriteString(fmt.Sprintf("%v", o.Instructions))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("stopsUntilDelivery=")
	builder.WriteString(fmt.Sprintf("%v", o.StopsUntilDelivery))
	builder.WriteString(", ")
	builder.WriteString("estimatedArrivalTime=")
	builder.WriteString(fmt.Sprintf("%v", o.EstimatedArrivalTime))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
