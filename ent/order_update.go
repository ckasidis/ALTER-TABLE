// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/mcbebu/ALTER-TABLE/ent/order"
	"github.com/mcbebu/ALTER-TABLE/ent/predicate"
	"github.com/mcbebu/ALTER-TABLE/ent/schema"
	"github.com/mcbebu/ALTER-TABLE/ent/shipper"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetAltMobileNumber sets the "altMobileNumber" field.
func (ou *OrderUpdate) SetAltMobileNumber(s string) *OrderUpdate {
	ou.mutation.SetAltMobileNumber(s)
	return ou
}

// SetNillableAltMobileNumber sets the "altMobileNumber" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAltMobileNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAltMobileNumber(*s)
	}
	return ou
}

// ClearAltMobileNumber clears the value of the "altMobileNumber" field.
func (ou *OrderUpdate) ClearAltMobileNumber() *OrderUpdate {
	ou.mutation.ClearAltMobileNumber()
	return ou
}

// SetAddress sets the "address" field.
func (ou *OrderUpdate) SetAddress(s schema.Address) *OrderUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddress(s *schema.Address) *OrderUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// SetLeaveParcel sets the "leaveParcel" field.
func (ou *OrderUpdate) SetLeaveParcel(b bool) *OrderUpdate {
	ou.mutation.SetLeaveParcel(b)
	return ou
}

// SetNillableLeaveParcel sets the "leaveParcel" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLeaveParcel(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetLeaveParcel(*b)
	}
	return ou
}

// SetInstructions sets the "instructions" field.
func (ou *OrderUpdate) SetInstructions(s []string) *OrderUpdate {
	ou.mutation.SetInstructions(s)
	return ou
}

// AppendInstructions appends s to the "instructions" field.
func (ou *OrderUpdate) AppendInstructions(s []string) *OrderUpdate {
	ou.mutation.AppendInstructions(s)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetStopsUntilDelivery sets the "stopsUntilDelivery" field.
func (ou *OrderUpdate) SetStopsUntilDelivery(i int) *OrderUpdate {
	ou.mutation.ResetStopsUntilDelivery()
	ou.mutation.SetStopsUntilDelivery(i)
	return ou
}

// SetNillableStopsUntilDelivery sets the "stopsUntilDelivery" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStopsUntilDelivery(i *int) *OrderUpdate {
	if i != nil {
		ou.SetStopsUntilDelivery(*i)
	}
	return ou
}

// AddStopsUntilDelivery adds i to the "stopsUntilDelivery" field.
func (ou *OrderUpdate) AddStopsUntilDelivery(i int) *OrderUpdate {
	ou.mutation.AddStopsUntilDelivery(i)
	return ou
}

// ClearStopsUntilDelivery clears the value of the "stopsUntilDelivery" field.
func (ou *OrderUpdate) ClearStopsUntilDelivery() *OrderUpdate {
	ou.mutation.ClearStopsUntilDelivery()
	return ou
}

// SetEstimatedArrivalTime sets the "estimatedArrivalTime" field.
func (ou *OrderUpdate) SetEstimatedArrivalTime(i int) *OrderUpdate {
	ou.mutation.ResetEstimatedArrivalTime()
	ou.mutation.SetEstimatedArrivalTime(i)
	return ou
}

// SetNillableEstimatedArrivalTime sets the "estimatedArrivalTime" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEstimatedArrivalTime(i *int) *OrderUpdate {
	if i != nil {
		ou.SetEstimatedArrivalTime(*i)
	}
	return ou
}

// AddEstimatedArrivalTime adds i to the "estimatedArrivalTime" field.
func (ou *OrderUpdate) AddEstimatedArrivalTime(i int) *OrderUpdate {
	ou.mutation.AddEstimatedArrivalTime(i)
	return ou
}

// ClearEstimatedArrivalTime clears the value of the "estimatedArrivalTime" field.
func (ou *OrderUpdate) ClearEstimatedArrivalTime() *OrderUpdate {
	ou.mutation.ClearEstimatedArrivalTime()
	return ou
}

// SetShippersID sets the "shippers" edge to the Shipper entity by ID.
func (ou *OrderUpdate) SetShippersID(id int) *OrderUpdate {
	ou.mutation.SetShippersID(id)
	return ou
}

// SetNillableShippersID sets the "shippers" edge to the Shipper entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippersID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetShippersID(*id)
	}
	return ou
}

// SetShippers sets the "shippers" edge to the Shipper entity.
func (ou *OrderUpdate) SetShippers(s *Shipper) *OrderUpdate {
	return ou.SetShippersID(s.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearShippers clears the "shippers" edge to the Shipper entity.
func (ou *OrderUpdate) ClearShippers() *OrderUpdate {
	ou.mutation.ClearShippers()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrderMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.StopsUntilDelivery(); ok {
		if err := order.StopsUntilDeliveryValidator(v); err != nil {
			return &ValidationError{Name: "stopsUntilDelivery", err: fmt.Errorf(`ent: validator failed for field "Order.stopsUntilDelivery": %w`, err)}
		}
	}
	if v, ok := ou.mutation.EstimatedArrivalTime(); ok {
		if err := order.EstimatedArrivalTimeValidator(v); err != nil {
			return &ValidationError{Name: "estimatedArrivalTime", err: fmt.Errorf(`ent: validator failed for field "Order.estimatedArrivalTime": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.AltMobileNumber(); ok {
		_spec.SetField(order.FieldAltMobileNumber, field.TypeString, value)
	}
	if ou.mutation.AltMobileNumberCleared() {
		_spec.ClearField(order.FieldAltMobileNumber, field.TypeString)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.LeaveParcel(); ok {
		_spec.SetField(order.FieldLeaveParcel, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Instructions(); ok {
		_spec.SetField(order.FieldInstructions, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedInstructions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, order.FieldInstructions, value)
		})
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.StopsUntilDelivery(); ok {
		_spec.SetField(order.FieldStopsUntilDelivery, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedStopsUntilDelivery(); ok {
		_spec.AddField(order.FieldStopsUntilDelivery, field.TypeInt, value)
	}
	if ou.mutation.StopsUntilDeliveryCleared() {
		_spec.ClearField(order.FieldStopsUntilDelivery, field.TypeInt)
	}
	if value, ok := ou.mutation.EstimatedArrivalTime(); ok {
		_spec.SetField(order.FieldEstimatedArrivalTime, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedEstimatedArrivalTime(); ok {
		_spec.AddField(order.FieldEstimatedArrivalTime, field.TypeInt, value)
	}
	if ou.mutation.EstimatedArrivalTimeCleared() {
		_spec.ClearField(order.FieldEstimatedArrivalTime, field.TypeInt)
	}
	if ou.mutation.ShippersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippersTable,
			Columns: []string{order.ShippersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ShippersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippersTable,
			Columns: []string{order.ShippersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetAltMobileNumber sets the "altMobileNumber" field.
func (ouo *OrderUpdateOne) SetAltMobileNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetAltMobileNumber(s)
	return ouo
}

// SetNillableAltMobileNumber sets the "altMobileNumber" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAltMobileNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAltMobileNumber(*s)
	}
	return ouo
}

// ClearAltMobileNumber clears the value of the "altMobileNumber" field.
func (ouo *OrderUpdateOne) ClearAltMobileNumber() *OrderUpdateOne {
	ouo.mutation.ClearAltMobileNumber()
	return ouo
}

// SetAddress sets the "address" field.
func (ouo *OrderUpdateOne) SetAddress(s schema.Address) *OrderUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddress(s *schema.Address) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// SetLeaveParcel sets the "leaveParcel" field.
func (ouo *OrderUpdateOne) SetLeaveParcel(b bool) *OrderUpdateOne {
	ouo.mutation.SetLeaveParcel(b)
	return ouo
}

// SetNillableLeaveParcel sets the "leaveParcel" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLeaveParcel(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetLeaveParcel(*b)
	}
	return ouo
}

// SetInstructions sets the "instructions" field.
func (ouo *OrderUpdateOne) SetInstructions(s []string) *OrderUpdateOne {
	ouo.mutation.SetInstructions(s)
	return ouo
}

// AppendInstructions appends s to the "instructions" field.
func (ouo *OrderUpdateOne) AppendInstructions(s []string) *OrderUpdateOne {
	ouo.mutation.AppendInstructions(s)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetStopsUntilDelivery sets the "stopsUntilDelivery" field.
func (ouo *OrderUpdateOne) SetStopsUntilDelivery(i int) *OrderUpdateOne {
	ouo.mutation.ResetStopsUntilDelivery()
	ouo.mutation.SetStopsUntilDelivery(i)
	return ouo
}

// SetNillableStopsUntilDelivery sets the "stopsUntilDelivery" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStopsUntilDelivery(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetStopsUntilDelivery(*i)
	}
	return ouo
}

// AddStopsUntilDelivery adds i to the "stopsUntilDelivery" field.
func (ouo *OrderUpdateOne) AddStopsUntilDelivery(i int) *OrderUpdateOne {
	ouo.mutation.AddStopsUntilDelivery(i)
	return ouo
}

// ClearStopsUntilDelivery clears the value of the "stopsUntilDelivery" field.
func (ouo *OrderUpdateOne) ClearStopsUntilDelivery() *OrderUpdateOne {
	ouo.mutation.ClearStopsUntilDelivery()
	return ouo
}

// SetEstimatedArrivalTime sets the "estimatedArrivalTime" field.
func (ouo *OrderUpdateOne) SetEstimatedArrivalTime(i int) *OrderUpdateOne {
	ouo.mutation.ResetEstimatedArrivalTime()
	ouo.mutation.SetEstimatedArrivalTime(i)
	return ouo
}

// SetNillableEstimatedArrivalTime sets the "estimatedArrivalTime" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEstimatedArrivalTime(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetEstimatedArrivalTime(*i)
	}
	return ouo
}

// AddEstimatedArrivalTime adds i to the "estimatedArrivalTime" field.
func (ouo *OrderUpdateOne) AddEstimatedArrivalTime(i int) *OrderUpdateOne {
	ouo.mutation.AddEstimatedArrivalTime(i)
	return ouo
}

// ClearEstimatedArrivalTime clears the value of the "estimatedArrivalTime" field.
func (ouo *OrderUpdateOne) ClearEstimatedArrivalTime() *OrderUpdateOne {
	ouo.mutation.ClearEstimatedArrivalTime()
	return ouo
}

// SetShippersID sets the "shippers" edge to the Shipper entity by ID.
func (ouo *OrderUpdateOne) SetShippersID(id int) *OrderUpdateOne {
	ouo.mutation.SetShippersID(id)
	return ouo
}

// SetNillableShippersID sets the "shippers" edge to the Shipper entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippersID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetShippersID(*id)
	}
	return ouo
}

// SetShippers sets the "shippers" edge to the Shipper entity.
func (ouo *OrderUpdateOne) SetShippers(s *Shipper) *OrderUpdateOne {
	return ouo.SetShippersID(s.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearShippers clears the "shippers" edge to the Shipper entity.
func (ouo *OrderUpdateOne) ClearShippers() *OrderUpdateOne {
	ouo.mutation.ClearShippers()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks[*Order, OrderMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.StopsUntilDelivery(); ok {
		if err := order.StopsUntilDeliveryValidator(v); err != nil {
			return &ValidationError{Name: "stopsUntilDelivery", err: fmt.Errorf(`ent: validator failed for field "Order.stopsUntilDelivery": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.EstimatedArrivalTime(); ok {
		if err := order.EstimatedArrivalTimeValidator(v); err != nil {
			return &ValidationError{Name: "estimatedArrivalTime", err: fmt.Errorf(`ent: validator failed for field "Order.estimatedArrivalTime": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.AltMobileNumber(); ok {
		_spec.SetField(order.FieldAltMobileNumber, field.TypeString, value)
	}
	if ouo.mutation.AltMobileNumberCleared() {
		_spec.ClearField(order.FieldAltMobileNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.LeaveParcel(); ok {
		_spec.SetField(order.FieldLeaveParcel, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Instructions(); ok {
		_spec.SetField(order.FieldInstructions, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedInstructions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, order.FieldInstructions, value)
		})
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.StopsUntilDelivery(); ok {
		_spec.SetField(order.FieldStopsUntilDelivery, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedStopsUntilDelivery(); ok {
		_spec.AddField(order.FieldStopsUntilDelivery, field.TypeInt, value)
	}
	if ouo.mutation.StopsUntilDeliveryCleared() {
		_spec.ClearField(order.FieldStopsUntilDelivery, field.TypeInt)
	}
	if value, ok := ouo.mutation.EstimatedArrivalTime(); ok {
		_spec.SetField(order.FieldEstimatedArrivalTime, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedEstimatedArrivalTime(); ok {
		_spec.AddField(order.FieldEstimatedArrivalTime, field.TypeInt, value)
	}
	if ouo.mutation.EstimatedArrivalTimeCleared() {
		_spec.ClearField(order.FieldEstimatedArrivalTime, field.TypeInt)
	}
	if ouo.mutation.ShippersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippersTable,
			Columns: []string{order.ShippersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ShippersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippersTable,
			Columns: []string{order.ShippersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
