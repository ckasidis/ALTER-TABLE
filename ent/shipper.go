// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mcbebu/ALTER-TABLE/ent/order"
	"github.com/mcbebu/ALTER-TABLE/ent/shipper"
)

// Shipper is the model entity for the Shipper schema.
type Shipper struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipperQuery when eager-loading is set.
	Edges          ShipperEdges `json:"edges"`
	shipper_orders *int
}

// ShipperEdges holds the relations/edges for other nodes in the graph.
type ShipperEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipperEdges) OrdersOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Orders == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipper) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipper.FieldID:
			values[i] = new(sql.NullInt64)
		case shipper.FieldName:
			values[i] = new(sql.NullString)
		case shipper.ForeignKeys[0]: // shipper_orders
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shipper", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipper fields.
func (s *Shipper) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipper.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shipper.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case shipper.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipper_orders", value)
			} else if value.Valid {
				s.shipper_orders = new(int)
				*s.shipper_orders = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the Shipper entity.
func (s *Shipper) QueryOrders() *OrderQuery {
	return NewShipperClient(s.config).QueryOrders(s)
}

// Update returns a builder for updating this Shipper.
// Note that you need to call Shipper.Unwrap() before calling this method if this Shipper
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipper) Update() *ShipperUpdateOne {
	return NewShipperClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shipper entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipper) Unwrap() *Shipper {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipper is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipper) String() string {
	var builder strings.Builder
	builder.WriteString("Shipper(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Shippers is a parsable slice of Shipper.
type Shippers []*Shipper
