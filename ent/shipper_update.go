// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mcbebu/ALTER-TABLE/ent/order"
	"github.com/mcbebu/ALTER-TABLE/ent/predicate"
	"github.com/mcbebu/ALTER-TABLE/ent/shipper"
)

// ShipperUpdate is the builder for updating Shipper entities.
type ShipperUpdate struct {
	config
	hooks    []Hook
	mutation *ShipperMutation
}

// Where appends a list predicates to the ShipperUpdate builder.
func (su *ShipperUpdate) Where(ps ...predicate.Shipper) *ShipperUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (su *ShipperUpdate) SetOrdersID(id int) *ShipperUpdate {
	su.mutation.SetOrdersID(id)
	return su
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (su *ShipperUpdate) SetNillableOrdersID(id *int) *ShipperUpdate {
	if id != nil {
		su = su.SetOrdersID(*id)
	}
	return su
}

// SetOrders sets the "orders" edge to the Order entity.
func (su *ShipperUpdate) SetOrders(o *Order) *ShipperUpdate {
	return su.SetOrdersID(o.ID)
}

// Mutation returns the ShipperMutation object of the builder.
func (su *ShipperUpdate) Mutation() *ShipperMutation {
	return su.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (su *ShipperUpdate) ClearOrders() *ShipperUpdate {
	su.mutation.ClearOrders()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShipperUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ShipperMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShipperUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShipperUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShipperUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShipperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shipper.Table, shipper.Columns, sqlgraph.NewFieldSpec(shipper.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipper.OrdersTable,
			Columns: []string{shipper.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipper.OrdersTable,
			Columns: []string{shipper.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShipperUpdateOne is the builder for updating a single Shipper entity.
type ShipperUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipperMutation
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (suo *ShipperUpdateOne) SetOrdersID(id int) *ShipperUpdateOne {
	suo.mutation.SetOrdersID(id)
	return suo
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (suo *ShipperUpdateOne) SetNillableOrdersID(id *int) *ShipperUpdateOne {
	if id != nil {
		suo = suo.SetOrdersID(*id)
	}
	return suo
}

// SetOrders sets the "orders" edge to the Order entity.
func (suo *ShipperUpdateOne) SetOrders(o *Order) *ShipperUpdateOne {
	return suo.SetOrdersID(o.ID)
}

// Mutation returns the ShipperMutation object of the builder.
func (suo *ShipperUpdateOne) Mutation() *ShipperMutation {
	return suo.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (suo *ShipperUpdateOne) ClearOrders() *ShipperUpdateOne {
	suo.mutation.ClearOrders()
	return suo
}

// Where appends a list predicates to the ShipperUpdate builder.
func (suo *ShipperUpdateOne) Where(ps ...predicate.Shipper) *ShipperUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShipperUpdateOne) Select(field string, fields ...string) *ShipperUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipper entity.
func (suo *ShipperUpdateOne) Save(ctx context.Context) (*Shipper, error) {
	return withHooks[*Shipper, ShipperMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShipperUpdateOne) SaveX(ctx context.Context) *Shipper {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShipperUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShipperUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShipperUpdateOne) sqlSave(ctx context.Context) (_node *Shipper, err error) {
	_spec := sqlgraph.NewUpdateSpec(shipper.Table, shipper.Columns, sqlgraph.NewFieldSpec(shipper.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shipper.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipper.FieldID)
		for _, f := range fields {
			if !shipper.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipper.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipper.OrdersTable,
			Columns: []string{shipper.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipper.OrdersTable,
			Columns: []string{shipper.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shipper{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
