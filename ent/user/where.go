// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mcbebu/ALTER-TABLE/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// MobileNumber applies equality check predicate on the "mobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileNumber, v))
}

// LeaveParcel applies equality check predicate on the "leaveParcel" field. It's identical to LeaveParcelEQ.
func LeaveParcel(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLeaveParcel, v))
}

// MobileNumberEQ applies the EQ predicate on the "mobileNumber" field.
func MobileNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "mobileNumber" field.
func MobileNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "mobileNumber" field.
func MobileNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "mobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "mobileNumber" field.
func MobileNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "mobileNumber" field.
func MobileNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "mobileNumber" field.
func MobileNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "mobileNumber" field.
func MobileNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "mobileNumber" field.
func MobileNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "mobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "mobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "mobileNumber" field.
func MobileNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "mobileNumber" field.
func MobileNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMobileNumber, v))
}

// LeaveParcelEQ applies the EQ predicate on the "leaveParcel" field.
func LeaveParcelEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLeaveParcel, v))
}

// LeaveParcelNEQ applies the NEQ predicate on the "leaveParcel" field.
func LeaveParcelNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLeaveParcel, v))
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
